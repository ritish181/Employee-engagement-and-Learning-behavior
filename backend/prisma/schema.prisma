generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Register {
  u_id             Int                     @id @default(autoincrement())
  u_name           String
  d_id             Int
  email            String                  @unique
  password         String
  registrationDate DateTime                @default(now())
  created_at       DateTime                @default(now())  // Track creation time
  role             String                  @default("user")
  approved         Int                     @default(0)
  department       Department              @relation(fields: [d_id], references: [d_id])
  feedback         Feedback[]
  engagements      Engagement[]
  discussions      DiscussionParticipation[]
}

model Department {
  d_id      Int          @id @default(autoincrement())
  d_name    String
  empcount  Int
  created_at DateTime    @default(now())  // Track creation time
  users     Register[]    // Back-reference for relation with Register
}

model Course {
  c_id       Int               @id @default(autoincrement())
  c_name     String
  created_at DateTime          @default(now())  // Track creation time

  materials  LearningMaterial[]
  feedback   Feedback[]
  quizzes    Quiz[]           // One course can have many quizzes
  discussion DiscussionParticipation[]
}

model LearningMaterial {
  m_id               Int               @id @default(autoincrement())
  title              String
  content            String
  type               String
  c_id               Int
  
  created_at         DateTime         @default(now())  // Track creation time
  course             Course            @relation(fields: [c_id], references: [c_id])
  engagements        Engagement[]
}


model Engagement {
  e_id              Int               @id @default(autoincrement())
  timeSpent         Int
  u_id              Int
  c_id              Int
  created_at        DateTime          @default(now())  // Track creation time
  register          Register          @relation(fields: [u_id], references: [u_id])
  module_completed    Boolean          @default(false) // Change this line
  m_id              Int
  learningMaterial  LearningMaterial  @relation(fields: [m_id], references: [m_id])
}

model Quiz {
  q_id       Int       @id @default(autoincrement())
  question   String
  optionA    String
  optionB    String
  optionC    String
  optionD    String
  correct_option String
  c_id       Int       // Foreign key to course
  created_at DateTime   @default(now())  // Track creation time

  course     Course    @relation(fields: [c_id], references: [c_id]) // Relation to Course
}


model Feedback {
  f_id      Int       @id @default(autoincrement())
  remarks   String
  u_id      Int
  rating    Int
  created_at DateTime @default(now())  // Track creation time
  register  Register   @relation(fields: [u_id], references: [u_id])
  c_id      Int
  course    Course     @relation(fields: [c_id], references: [c_id])
}

model DiscussionParticipation {
  id        Int        @id @default(autoincrement())
  c_id      Int
  comment   String
  u_id      Int
  created_at DateTime  @default(now())  // Track creation time
  register  Register    @relation(fields: [u_id], references: [u_id])
  course    Course     @relation(fields: [c_id], references: [c_id])
}
